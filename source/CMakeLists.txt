set(home_dir "${CMAKE_SOURCE_DIR}")
set(lib_dir ${home_dir}/third)

set(CMAKE_VERBOSE_MAKEFILE on)
set(CMAKE_CXX_COMPILER g++)
set(CMAKE_C_COMPILER gcc)

macro(add_src_subdirs source_files)
	foreach(_subdir ${ARGN})
		set(_sub_files "")
		if("${_subdir}" STREQUAL ".")
			aux_source_directory("${CMAKE_CURRENT_SOURCE_DIR}" _sub_files)
			include_directories(${CMAKE_CURRENT_SOURCE_DIR}/) 
		else()
			aux_source_directory("${CMAKE_CURRENT_SOURCE_DIR}/${_subdir}/src" _sub_files)
			include_directories(${CMAKE_CURRENT_SOURCE_DIR}/${_subdir}/include) 
		endif()
		set(source_files ${_sub_files} ${${source_files}})
	endforeach(_subdir)
endmacro()

add_src_subdirs(source_files "." "test")

include_directories(${lib_dir}/svrbase/base/include)
include_directories(${lib_dir}/svrbase/cfg/include)
include_directories(${lib_dir}/svrbase/libuv/include)
include_directories(${lib_dir}/libuv/linux/include)
include_directories(${lib_dir}/rapidjson)

link_directories("/usr/lib64/mysql/")
set(lib_link ${lib_link} "${lib_dir}/libuv/linux/lib/libuv.a")
set(lib_link ${lib_link} "${lib_dir}/svrbase/lib/linux/svrbase.a")
set(lib_link ${lib_link} "pthread")
set(lib_link_flag "")
set(CMAKE_C_FLAGS "-ggdb")
set(CMAKE_CXX_FLAGS "-O0 -std=c++0x")

set(EXECUTABLE_OUTPUT_PATH "${home_dir}/bin")
message(STATUS "source_files:${source_files}")
add_executable(test ${source_files}) 
message(STATUS "lib_link:${lib_link}")
set(CMAKE_EXE_LINKER_FLAGS "${lib_link_flag}")
target_link_libraries(test ${lib_link}) 
